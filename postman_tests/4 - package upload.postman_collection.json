{
	"info": {
		"_postman_id": "210905e7-4dca-4388-8aca-934dfdb1ec23",
		"name": "4 - package upload",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "alpha (Server) localhost:{{port}}/templates/reestr-template",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- GET JSON Schema ---//\r",
							"\r",
							"\r",
							"pm.test(\"JSON schema has been successfully received\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: 'http://localhost:3000' + '/schemas/reestr-template',\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"JSON schema has been received less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"\r",
							"        console.log(res.json());\r",
							"\r",
							"        pm.test(\"JSON schema was recorded to the environment collection\", function () {\r",
							"            pm.environment.set(\"reestr_template_schema\", JSON.stringify(res.json()));\r",
							"            pm.expect(res.json()).to.eql(JSON.parse(pm.environment.get(\"reestr_template_schema\")));\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"\r",
							"/* К оплате: (Fee + Interest + Interest395 + MainDebtExpired + PercentOverdue + Penalty + PenaltyforMainDebtDelay + PenaltyforPercentDelay + CommissionOverdue + StateFee + Unstructured) */\r",
							"\r",
							"\r",
							"const reestr_template_schema = JSON.parse(pm.environment.get(\"reestr_template_schema\"))\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(`Check the active environment is 'package upload'`, () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"package upload\");\r",
							"});\r",
							"\r",
							"pm.test(`Successful GET request! Status code is 200`, function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(`Status code is \"OK\"`, function () {\r",
							"  pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test('Schema \"reestr-template\" is valid', function() {\r",
							"pm.expect(tv4.validate(body, reestr_template_schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"  pm.expect(body).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Array consists of objects\", function () {\r",
							"  pm.expect(body.every(elem => typeof(elem) === \"object\")).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(`Response body has all expected keys and length of ${reestr_template_schema.items.required.length}`, function (expected_keys_in_response_body = reestr_template_schema.items.required) {\r",
							"\r",
							"  body.forEach((elem)=> {\r",
							"\r",
							"      let storageTank = Object.keys(elem).filter(function(key) {\r",
							"          return !expected_keys_in_response_body.includes(key)\r",
							"      });\r",
							"\r",
							"      if (storageTank.length !== 0) {\r",
							"          console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"      }\r",
							"\r",
							"      pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"      pm.expect(storageTank.length).to.eql(0);\r",
							"\r",
							"      pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"\r",
							"  })\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(`\"Currency\" keys have expected values`, function () {\r",
							"    pm.expect(body.every(elem => pm.expect(elem.Currency).to.be.oneOf(reestr_template_schema.items.properties.Currency.enum))).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body with debtors' package data was successfully recorded to the environment collection\", function () {\r",
							"    pm.environment.set(\"reestr-template\", JSON.stringify(body));\r",
							"\tpm.expect(pm.environment.get(\"reestr-template\")).to.eql(JSON.stringify(body));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "http://localhost:3000/templates/reestr-template",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"templates",
						"reestr-template"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Загрузка реестра) /api/admin/import-reestr",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"//-------------------------//\r",
							"\r",
							"\r",
							"function random_date(starting_date, closing_date) {\r",
							"    return new Date(starting_date.getTime() + Math.random() * (closing_date.getTime() - starting_date.getTime()));\r",
							"}\r",
							"\r",
							"function random_element(array) {\r",
							"    return array[Number(Math.floor(Math.random() * Math.floor(array.length)))];\r",
							"}\r",
							"\r",
							"\r",
							"let deliveryDate = random_date(new Date(1901, 0, 1), new Date());\r",
							"    deliveryDate = deliveryDate.getFullYear() + '-' + ('0' + (deliveryDate.getMonth() + 1)).slice(-2) + '-' + ('0' + deliveryDate.getDate()).slice(-2);\r",
							"\r",
							"pm.environment.set(\"deliveryDate\", deliveryDate);\r",
							"\r",
							"\r",
							"let fromDate = new Date();\r",
							"    fromDate = fromDate.getFullYear() + '-' + ('0' + (fromDate.getMonth() + 1)).slice(-2) + '-' + ('0' + fromDate.getDate()).slice(-2);\r",
							"\r",
							"pm.environment.set(\"fromDate\", fromDate);\r",
							"\r",
							"\r",
							"let toDate = random_date(new Date(), new Date(9999, 11, 31));\r",
							"    toDate = toDate.getFullYear() + '-' + ('0' + (toDate.getMonth() + 1)).slice(-2) + '-' + ('0' + toDate.getDate()).slice(-2);\r",
							"\r",
							"pm.environment.set(\"toDate\", toDate);\r",
							"\r",
							"\r",
							"let registration_options = [true, false];\r",
							"    needRegistration     = random_element(registration_options);\r",
							"    \r",
							"pm.environment.set(\"needRegistration\", needRegistration);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"const expected_keys_in_response_body = [\"ContragentID\", \"PackageID\", \"CountDebtor\", \"CountCase\", \"CountRelatedCases\", \"CountPhone\", \"CountIncorrectPhone\", \"CountInvoice\",\"CountTransaction\"];\r",
							"\r",
							"const import_reestr_schema = {\r",
							"\r",
							"    \"title\": `select * from \"Data\".\"Package\" where \"IsDeleted\" = 0`,\r",
							"    \"required\": [\r",
							"        \"ContragentID\",\r",
							"        \"PackageID\",\r",
							"        \"CountDebtor\",\r",
							"        \"CountCase\",\r",
							"        \"CountRelatedCases\",\r",
							"        \"CountPhone\",\r",
							"        \"CountIncorrectPhone\",\r",
							"        \"CountInvoice\",\r",
							"        \"CountTransaction\"\r",
							"    ],\r",
							"    \"properties\": {\r",
							"        \"ContragentID\": {\r",
							"            \"title\": \"Контрагент\",\r",
							"            \"default\": \"0\",\r",
							"\t\t\t\"enum\": [`${pm.globals.get(\"ContrahensID\")}`],\r",
							"            \"pattern\": `^${pm.globals.get(\"ContrahensID\")}$`,\r",
							"            \"examples\": [\r",
							"                \"3396\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/ContragentID\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"PackageID\": {\r",
							"            \"title\": \"Номер реестра\",\r",
							"            \"default\": 0,\r",
							"            \"examples\": [\r",
							"                33815\r",
							"            ],\r",
							"            \"$id\": \"#/properties/PackageID\",\r",
							"            \"type\": \"integer\"\r",
							"        },\r",
							"        \"CountDebtor\": {\r",
							"            \"title\": \"К-во созданных записей в Debtor\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"1\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountDebtor\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountCase\": {\r",
							"            \"title\": \"К-во созданных записей в Case\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"1\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountCase\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountRelatedCases\": {\r",
							"            \"title\": \"К-во созданных смежных дел\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"0\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountRelatedCases\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountPhone\": {\r",
							"            \"title\": \"К-во созданных записей в Phone\",\r",
							"            \"default\": \"0\",\r",
							"            \"examples\": [\r",
							"                \"0\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountPhone\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountIncorrectPhone\": {\r",
							"            \"title\": \"К-во созданных записей в IncorrectPhone\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"0\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountIncorrectPhone\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountInvoice\": {\r",
							"            \"title\": \"К-во созданных записей в Invoice\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"1\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountInvoice\",\r",
							"            \"type\": \"string\"\r",
							"        },\r",
							"        \"CountTransaction\": {\r",
							"            \"title\": \"К-во созданных записей в Transaction\",\r",
							"            \"default\": \"\",\r",
							"            \"pattern\": \"^(.*)$\",\r",
							"            \"examples\": [\r",
							"                \"1\"\r",
							"            ],\r",
							"            \"$id\": \"#/properties/CountTransaction\",\r",
							"            \"type\": \"string\"\r",
							"        }\r",
							"    },\r",
							"    \"$id\": \"/api/admin/import-reestr\",\r",
							"    \"type\": \"object\",\r",
							"    \"additionalProperties\": false,\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft/2020-12/json-schema-validation.html\"\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(`Check the active environment is 'package upload'`, () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"package upload\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(`Status code is \"OK\"`, function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test('Schema \"import-reestr\" is valid', function() {\r",
							"  pm.expect(tv4.validate(body, import_reestr_schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'ContragentID' in the response body is a string and is equal to the value 'ContrahensID' from the global collection\", function () {\r",
							"    pm.expect(body.ContragentID).to.be.a('string');\r",
							"    pm.expect(Number(body.ContragentID)).to.be.above(0);\r",
							"\r",
							"    pm.expect(String(pm.globals.get(\"ContrahensID\"))).to.be.eql(String(body.ContragentID));\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'PackageID' in the response body is a number greater than 0\", function () {\r",
							"    pm.expect(body.PackageID).to.be.a('number');\r",
							"    pm.expect(body.PackageID).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountDebtor' in the response body is a string that equals 2\", function () {\r",
							"    pm.expect(body.CountDebtor).to.be.a('string');\r",
							"    pm.expect(body.CountDebtor).to.eql(\"2\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountCase' in the response body is a string that equals 2\", function () {\r",
							"    pm.expect(body.CountCase).to.be.a('string');\r",
							"    pm.expect(body.CountCase).to.eql(\"2\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountRelatedCases' in the response body is a string that equals 0\", function () {\r",
							"    pm.expect(body.CountRelatedCases).to.be.a('string');\r",
							"    pm.expect(body.CountRelatedCases).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountPhone' in the response body is a string that equals 0\", function () {\r",
							"    pm.expect(body.CountPhone).to.be.a('string');\r",
							"    pm.expect(body.CountPhone).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountIncorrectPhone' in the response body is a string that equals 0\", function () {\r",
							"    pm.expect(body.CountIncorrectPhone).to.be.a('string');\r",
							"    pm.expect(body.CountIncorrectPhone).to.eql(\"0\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountInvoice' in the response body is a string that equals 2\", function () {\r",
							"    pm.expect(body.CountInvoice).to.be.a('string');\r",
							"    pm.expect(body.CountInvoice).to.eql(\"2\");\r",
							"});\r",
							"\r",
							"pm.test(\"Value in key 'CountTransaction' in the response body is a string that equals 2\", function () {\r",
							"    pm.expect(body.CountTransaction).to.be.a('string');\r",
							"    pm.expect(body.CountTransaction).to.eql(\"2\");\r",
							"});\r",
							"\r",
							"pm.test(\"PackageID was recorded to the global collection as 'PackID'\", function () {\r",
							"    pm.globals.set(\"PackID\", body.PackageID);\r",
							"    pm.expect(body.PackageID).to.eql(pm.globals.get(\"PackID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "/C:/Users/Yaroslav.Plias/Desktop/Projects/API_tests/external_files/hr/reestr-template.csv"
						},
						{
							"key": "contragentID",
							"value": "{{ContrahensID}}",
							"type": "text"
						},
						{
							"key": "deliveryDate",
							"value": "{{deliveryDate}}",
							"type": "text"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}",
							"type": "text"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}",
							"type": "text"
						},
						{
							"key": "needRegistration",
							"value": "{{needRegistration}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{request_url}}/api/admin/import-reestr",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"admin",
						"import-reestr"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Поиск по контрагенту) /api/search?page={{integer}}&ContragentIDList%5B%5D={{integer}}&BatchCode=&PackageNumFrom={{integer}}&PackageNumTo={{integer}}&pagination={{integer}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"const expected_keys_in_response_body = [\"CaseID\", \"DebtorID\", \"StageID\", \"DebtorTypeID\", \"CaseProcessID\", \"CaseProcessName\", \"ContragentCaseID\", \"ActualSum\", \"Currency\", \"MiddleName\", \"FirstName\", \"LastName\", \"CityCode\", \"CaseToken\", \"Region\", \"City\", \"District\", \"Street\", \"Building\", \"House\", \"Apartment\", \"AddressID\", \"StartDate\", \"ContragentName\", \"ContragentID\", \"Creditor\", \"PackageID\", \"AccountNum\", \"VirtualGroupName\", \"PackageSegmentName\"];\r",
							"\r",
							"const search_schema = {\r",
							"    \"title\": \"array data structure consisting of a collection of debtors' cases\",\r",
							"    \"items\": {\r",
							"        \"title\": \"object value containing some information about debtor's case\",\r",
							"        \"required\": [\r",
							"            \"CaseID\",\r",
							"            \"DebtorID\",\r",
							"            \"StageID\",\r",
							"            \"DebtorTypeID\",\r",
							"            \"CaseProcessID\",\r",
							"            \"CaseProcessName\",\r",
							"            \"ContragentCaseID\",\r",
							"            \"ActualSum\",\r",
							"            \"Currency\",\r",
							"            \"MiddleName\",\r",
							"            \"FirstName\",\r",
							"            \"LastName\",\r",
							"            \"CityCode\",\r",
							"            \"CaseToken\",\r",
							"            \"Region\",\r",
							"            \"City\",\r",
							"            \"District\",\r",
							"            \"Street\",\r",
							"            \"Building\",\r",
							"            \"House\",\r",
							"            \"Apartment\",\r",
							"            \"AddressID\",\r",
							"            \"StartDate\",\r",
							"            \"ContragentName\",\r",
							"            \"ContragentID\",\r",
							"            \"Creditor\",\r",
							"            \"PackageID\",\r",
							"            \"AccountNum\",\r",
							"            \"VirtualGroupName\",\r",
							"            \"PackageSegmentName\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"CaseID\": {\r",
							"                \"title\": `(Дело) SQL: select \"ID\" from \"Data\".\"Case\";`,\r",
							"                \"default\": 0,\r",
							"                \"examples\": [\r",
							"                    120753848\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/CaseID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"DebtorID\": {\r",
							"                \"title\": `SQL: select \"ID\" from \"Data\".\"Debtor\";`,\r",
							"                \"default\": 0,\r",
							"                \"examples\": [\r",
							"                    31822669\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/DebtorID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"StageID\": {\r",
							"                \"title\": `(Стадия) SQL: select \"Case\".\"ID\" as \"CaseID\", \"DebtorID\", \"StageID\", \"CaseStage\".\"Name\" as \"CaseStage\" from \"Data\".\"Case\" full outer join \"Dictionary\".\"CaseStage\" on \"Case\".\"StageID\" = \"CaseStage\".\"ID\";`,\r",
							"                \"default\": 0,\r",
							"                \"examples\": [\r",
							"                    1\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/StageID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"DebtorTypeID\": {\r",
							"                \"title\": `SQL: select \"Debtor\".\"ID\" as \"DebtorID\", \"TypeID\", \"DebtorType\".\"Name\" as \"DebtorType\" from \"Data\".\"Debtor\" full outer join \"Dictionary\".\"DebtorType\" on \"Debtor\".\"TypeID\" = \"DebtorType\".\"ID\";`,\r",
							"                \"default\": 0,\r",
							"                \"examples\": [\r",
							"                    1\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/DebtorTypeID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"CaseProcessID\": {\r",
							"                \"title\": `(Режим) SQL: select \"Case\".\"ID\" as \"CaseID\", \"Case\".\"CaseProcess\" as \"CaseProcessID\", \"CaseProcess\".\"Name\" as \"CaseProcess\" from \"Data\".\"Case\" full outer join \"Dictionary\".\"CaseProcess\" on \"Case\".\"CaseProcess\" = \"CaseProcess\".\"ID\";`,\r",
							"                \"default\": 0,\r",
							"                \"examples\": [\r",
							"                    2\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/CaseProcessID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"CaseProcessName\": {\r",
							"                \"title\": `(Режим) SQL: select * from \"Dictionary\".\"CaseProcess\" where \"IsDeleted\" = 0;`,\r",
							"                \"default\": \"\",\r",
							"                \"enum\": [\"активный\", \"закрытый\", \"приостановленный\", \"оплаченный\", \"заблокировано\", \"мониторинг\"],\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"приостановленный\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/CaseProcessName\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ContragentCaseID\": {\r",
							"                \"title\": `('DebtorAccountID' column in external file of package import, 'Клиентский рег номер' in search results page and at the case level (in 'Principal' ('Доверитель') tab) SQL: select \"ContragentCaseID\" from \"Data\".\"Case\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"DebtorAccountID (база: \\\"Data\\\".\\\"Case\\\" -> \\\"ContragentCaseID\\\") 1234567890 .!@№#$;%^:&?*()_-+=/> <,`$'`\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/ContragentCaseID\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ActualSum\": {\r",
							"                \"title\": `Сумма к оплате`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"125915.450000\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/ActualSum\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"Currency\": {\r",
							"                \"title\": `SQL: select * from \"Dictionary\".\"Currency\" where \"IsDeleted\" = 0;`,\r",
							"                \"default\": \"\",\r",
							"                \"enum\": [\"Piece\", \"USD\", \"RUB\", \"EUR\", \"UAH\", \"CHF\"],\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"RUB\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Currency\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"MiddleName\": {\r",
							"                \"title\": `(Отчество) SQL: select \"MiddleName\" from \"Data\".\"Debtor\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/MiddleName\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"FirstName\": {\r",
							"                \"title\": `(Имя) SQL: select \"FirstName\" from \"Data\".\"Debtor\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/FirstName\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"LastName\": {\r",
							"                \"title\": `(Фамилия) SQL: select \"LastName\" from \"Data\".\"Debtor\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"Surname - Фамилия 1234567890\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/LastName\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"CityCode\": {\r",
							"                \"title\": \"CityCode\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/CityCode\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"CaseToken\": {\r",
							"                \"title\": \"CaseToken\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/CaseToken\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"Region\": {\r",
							"                \"title\": \"Region\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Region\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"City\": {\r",
							"                \"title\": \"City\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/City\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"District\": {\r",
							"                \"title\": \"District\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/District\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"Street\": {\r",
							"                \"title\": \"Street\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Street\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"Building\": {\r",
							"                \"title\": \"Building\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Building\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"House\": {\r",
							"                \"title\": \"House\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/House\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"Apartment\": {\r",
							"                \"title\": \"Apartment\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Apartment\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"AddressID\": {\r",
							"                \"title\": \"AddressID\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/AddressID\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"StartDate\": {\r",
							"                \"title\": `('Работаем с', 'Дата начала работы') SQL: select \"StartDate\" from \"Data\".\"Package\"`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"2021-03-17\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/StartDate\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ContragentName\": {\r",
							"                \"title\": `(Название контрагента) SQL: select \"Name\" from \"Data\".\"Contragent\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"Название контрагента (Counterparty's name) 1234567890 .!@№#$;%^:&?*()_-+=/> <,`$'`\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/ContragentName\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"ContragentID\": {\r",
							"                \"title\": `(№ Контрагента) SQL: select \"ID\" from \"Data\".\"Contragent\";`,\r",
							"                \"default\": 0,\r",
							"                \"enum\": [Number(`${pm.globals.get(\"ContrahensID\")}`)],\r",
							"                \"examples\": [\r",
							"                    3421\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/ContragentID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"Creditor\": {\r",
							"                \"title\": `(Кредитор) SQL: select \"Creditor\" from \"Data\".\"Contragent\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"Кредитор (Lender) 1234567890 .!@№#$;%^:&?*()_-+=/> <,`$'`\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Creditor\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"PackageID\": {\r",
							"                \"title\": `('ID реестра', 'Пакет') SQL: select \"ID\" from \"Data\".\"Package\";`,\r",
							"                \"default\": 0,\r",
							"                \"enum\": [Number(`${pm.globals.get(\"PackID\")}`)],\r",
							"                \"examples\": [\r",
							"                    37683\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/PackageID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"AccountNum\": {\r",
							"                \"title\": `('AccountNumber' column in external file of package import, 'Клиентский рег номер' in search results page, 'Номер договора' at the case level) SQL: select \"AccountNum\" from \"Data\".\"Case\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"AccountNumber (Номер договора, base: \\\"Data\\\".\\\"Invoice\\\" -> \\\"AccountNum\\\") 1234567890 .!@№#$;%^:&?*()_-+=/> <,`$'`\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/AccountNum\",\r",
							"                \"type\": \"string\"\r",
							"            },\r",
							"            \"VirtualGroupName\": {\r",
							"                \"title\": \"VirtualGroupName\",\r",
							"                \"default\": null,\r",
							"                \"examples\": [\r",
							"                    null\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/VirtualGroupName\",\r",
							"                \"type\": \"null\"\r",
							"            },\r",
							"            \"PackageSegmentName\": {\r",
							"                \"title\": \"PackageSegmentName\",\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^Default$\",\r",
							"                \"enum\": [\"Default\"],\r",
							"                \"examples\": [\r",
							"                    \"Default\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/PackageSegmentName\",\r",
							"                \"type\": \"string\"\r",
							"            } \r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"type\": \"object\",\r",
							"        \"additionalProperties\": false\r",
							"    },\r",
							"    \"$id\": \"/api/search\",\r",
							"    \"type\": \"array\",\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"http://json-schema.org/draft/2020-12/json-schema-validation.html\"\r",
							"};\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"\r",
							"pm.test(`Check the active environment is 'package upload'`, () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"package upload\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(`Status code is \"OK\"`, function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test('search schema is valid', function() {\r",
							"  pm.expect(tv4.validate(body, search_schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an array\", function () {\r",
							"  pm.expect(body).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Objects in array data structure\", function () {\r",
							"  pm.expect(body.every(elem => typeof(elem) === \"object\")).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(`Response body has all expected keys and length of ${expected_keys_in_response_body.length}`, function () {\r",
							"  body.forEach((elem)=> {\r",
							"\r",
							"      let storageTank = Object.keys(elem).filter(function(key) {\r",
							"          return !expected_keys_in_response_body.includes(key) \r",
							"      });\r",
							"      \r",
							"      if (storageTank.length !== 0) {\r",
							"          console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"      }\r",
							"\r",
							"      pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"      pm.expect(storageTank.length).to.eql(0);\r",
							"\r",
							"      pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"      \r",
							"  })\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/search?page=1&ContragentIDList%5B%5D={{ContrahensID}}&BatchCode=&PackageNumFrom={{PackID}}&PackageNumTo={{PackID}}&pagination=10",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"search"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "ContragentIDList%5B%5D",
							"value": "{{ContrahensID}}"
						},
						{
							"key": "BatchCode",
							"value": ""
						},
						{
							"key": "PackageNumFrom",
							"value": "{{PackID}}"
						},
						{
							"key": "PackageNumTo",
							"value": "{{PackID}}"
						},
						{
							"key": "pagination",
							"value": "10"
						}
					]
				}
			},
			"response": []
		}
	]
}