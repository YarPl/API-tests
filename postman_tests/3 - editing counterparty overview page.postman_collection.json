{
	"info": {
		"_postman_id": "bfcf295e-6661-424b-976b-3f271f10f45a",
		"name": "3 - editing counterparty overview page",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "(acquistion) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function deepEqual(obj1, obj2) {\r",
							"\treturn JSON.stringify(obj1) === JSON.stringify(obj2);\r",
							"}\r",
							" \r",
							"const body           =pm.response.json();\r",
							"const AdditionalInfo = body.AdditionalInfo;\r",
							"const letterType     = body.letterType;\r",
							" \r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \r",
							"                                         \"City\", \"Street\", \"PhoneNumber\", \"FaxNumber\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"ReceivingBank\", \"BranchBank\", \"BankId\", \"TaxNumber\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"BankAccountRequired\", \"PersonalAccountEnabled\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"PromiseDays\", \"DefaultBookingOrderID\", \"WebSite\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"ShortNameEng\", \"PaymentDetails\", \"Inserted\", \"Updated\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t \"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							" \r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							" \r",
							"\r",
							"class Entries {\r",
							"\t \r",
							"\tstatic dictionary = {\r",
							"\t\t \"body\"           : [\"Name\", \"GroupName\", \"ShortName\", \"SegmentID\", \"ShortNameEng\", \"IsActive\",  \"Priority\", \"Creditor\", \"ResponsibleUserID\", \"WebSite\", \"AutoLetter\", \"BankAccountRequired\", \"PersonalAccountEnabled\", \"IsAutoCall\", \"IsAutoSms\"],\r",
							"\t\t \"AdditionalInfo\" : [\"ContractType\", \"AgreementDate\", \"ContractNumber\", \"ClientInfoPhone\", \"PrimaryCreditor\", \"MinAmountToPrint\", \"ContragentInfoEmail\", \"ContragentTaxNumber\", \"ShowPrimaryCreditor\", \"ContragentInfoAddress\", \"ContragentInfoPostAddress\"]\r",
							"\t}\r",
							" \r",
							"\tstatic extractFrom(object) {\r",
							"\t\t\r",
							"\t\tlet obj = {};\r",
							"\t\t\r",
							"\t\tfor (let prop in object) {\r",
							"\t\t\t\r",
							"\t\t\tif ((this.dictionary.body.includes(prop)) || (this.dictionary.AdditionalInfo.includes(prop))) {\r",
							"\t\t\t\tobj[prop] = object[prop]\r",
							"\t\t\t}\r",
							"\t\t}\r",
							"\t\t\r",
							"\t\treturn obj;\r",
							"\t}\r",
							"}\r",
							" \r",
							" \r",
							" \r",
							" /* --- TESTS --- */\r",
							" \r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							" \r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"\tpm.response.to.have.status(200);\r",
							" });\r",
							" \r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"\tpm.response.to.have.status(\"OK\");\r",
							" });\r",
							" \r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(5000);\r",
							" });\r",
							" \r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							" \r",
							"\tpm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							" \r",
							"\t let storageTank = Object.keys(body).filter(function(key) {\r",
							"\t\t return !expected_keys_in_response_body.includes(key) \r",
							"\t }); \r",
							"\t\t\t\r",
							"\t if (storageTank.length !== 0) {\r",
							"\t\t console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"\t }\r",
							"\t \r",
							"\tpm.expect(storageTank.length).to.eql(0);\r",
							" });\r",
							" \r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"\tpm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							" });\r",
							" \r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"\tpm.expect(letterType).to.be.an('array');\r",
							" \r",
							"\t letterType.forEach((elem)=> {\r",
							"\t\tpm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"\t\tpm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							" \r",
							"\t\tpm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"\t\tpm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							" \r",
							"\t\t let storageTank = Object.keys(elem).filter(function(key) {\r",
							"\t\t\t return !expected_keys_in_letterType.includes(key) \r",
							"\t\t });\r",
							"\t\t \r",
							"\t\t if (storageTank.length !== 0) {\r",
							"\t\t\t console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"\t\t }\r",
							"\t\t \r",
							"\t\tpm.expect(storageTank.length).to.eql(0);\r",
							"\t\t \r",
							"\t })\r",
							" })\r",
							" \r",
							" \r",
							" // --- Data backup\r",
							" \r",
							"pm.test(\"Response body and backup response were successfully saved to the environment collection\", function () {\r",
							" \r",
							"\t body.strategy = \"overview\";\r",
							"\t\r",
							"\tpm.environment.set(\"original_response\", JSON.stringify(body));\r",
							"\tpm.environment.set(\"response\", JSON.stringify(body));\r",
							" \r",
							"\tpm.expect(deepEqual(body, JSON.parse(pm.environment.get(\"original_response\")))).to.be.true;\r",
							"\tpm.expect(pm.environment.get(\"original_response\")).to.eql(pm.environment.get(\"response\"));\r",
							"  \r",
							" });\r",
							" \r",
							" \r",
							" // --- Clear environment variables\r",
							" \r",
							"pm.test(\"Environment variables were cleared\", function () {\r",
							"\t \r",
							"\t Entries.dictionary.body.forEach((elem)=> {\r",
							"\t\tpm.environment.unset(elem);\r",
							"\t\tpm.expect(pm.environment.get(elem)).to.eql(undefined);\r",
							" \r",
							"\t\tpm.environment.unset(\"new_\" + elem);\r",
							"\t\tpm.expect(pm.environment.get(\"new_\" + elem)).to.eql(undefined);\r",
							"\t })\r",
							" \r",
							"\t Entries.dictionary.AdditionalInfo.forEach((elem)=> {\r",
							"\t\tpm.environment.unset(elem);\r",
							"\t\tpm.expect(pm.environment.get(elem)).to.eql(undefined);\r",
							" \r",
							"\t\tpm.environment.unset(\"new_\" + elem);\r",
							"\t\tpm.expect(pm.environment.get(\"new_\" + elem)).to.eql(undefined);\r",
							"\t  })\r",
							"  \r",
							" });\r",
							" \r",
							" \r",
							" // --- Memorizing editable keys' values\r",
							" \r",
							"pm.test(\"Editable from counterparty overview page keys located in the response body were written to the environment collection\", function () {\r",
							" \r",
							"\t for (const [key, value] of Object.entries(Entries.extractFrom(body))) {\r",
							"\t\tpm.environment.set(key, value);\r",
							"\t }\r",
							" \r",
							"\t Entries.dictionary.body.forEach((elem)=> {\r",
							"\t\tpm.expect(pm.environment.get(elem)).to.eql(body[elem]);\r",
							"\t })\r",
							" })\r",
							" \r",
							"pm.test(\"Editable from counterparty overview page keys located in the 'AdditionalInfo' key were written to the environment collection\", function () {\r",
							" \r",
							"\t for (const [key, value] of Object.entries(Entries.extractFrom(AdditionalInfo))) {\r",
							"\t\tpm.environment.set(key, value);\r",
							"\t }\r",
							" \r",
							"\t Entries.dictionary.AdditionalInfo.forEach((elem)=> {\r",
							"\t\tpm.expect(pm.environment.get(elem)).to.eql(AdditionalInfo[elem]);\r",
							"\t })\r",
							" })"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Name) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"new_Name\", \"NEW! Counterparty's name (Название контрагента)\");\r",
							"\r",
							"pm.test(\"Key 'Name' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Name).to.eql(pm.environment.get(\"Name\"));\r",
							"\r",
							"    jsonData.Name = pm.environment.get(\"new_Name\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Name).to.not.eql(pm.environment.get(\"Name\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'Name' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.Name).to.eql(pm.environment.get(\"new_Name\"));\r",
							"    pm.expect(body.Name).to.not.eql(pm.environment.get(\"Name\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(GroupName) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"new_GroupName\", \"NEW! Counterparty's group name (Название группы контрагента)\");\r",
							"\r",
							"pm.test(\"Key 'GroupName' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.GroupName).to.eql(pm.environment.get(\"GroupName\"));\r",
							"\r",
							"    jsonData.GroupName = pm.environment.get(\"new_GroupName\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.GroupName).to.not.eql(pm.environment.get(\"GroupName\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'GroupName' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.GroupName).to.eql(pm.environment.get(\"new_GroupName\"));\r",
							"    pm.expect(body.GroupName).to.not.eql(pm.environment.get(\"GroupName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(ShortName) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"new_ShortName\", \"1234567890 - Сокращенное название Контрагента (Кириллица)\");\r",
							"\r",
							"pm.test(\"Key 'ShortName' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ShortName).to.eql(pm.environment.get(\"ShortName\"));\r",
							"\r",
							"    jsonData.ShortName = pm.environment.get(\"new_ShortName\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ShortName).to.not.eql(pm.environment.get(\"ShortName\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ShortName' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.ShortName).to.eql(pm.environment.get(\"new_ShortName\"));\r",
							"    pm.expect(body.ShortName).to.not.eql(pm.environment.get(\"ShortName\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(new_SegmentID) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"All keys remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- RECEIVING NOT DELETED SEGMENTS ID ---//\r",
							"\r",
							"\r",
							"\r",
							"function random_element(array) {\r",
							"    return array[Number(Math.floor(Math.random() * Math.floor(array.length)))];\r",
							"}\r",
							"\r",
							"pm.test(\"GET /api/contragent-segment status code is 200\", function () {\r",
							"    \r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"    \r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/contragent-segment',\r",
							"        method: 'GET',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {}\r",
							"    }, function (err, res) {\r",
							"\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"        \r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"GET /api/contragent-segment response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"        \r",
							"        let body          = res.json();\r",
							"        let new_SegmentID;\r",
							"\r",
							"        do {\r",
							"            new_SegmentID = random_element(body).ID\r",
							"        } while (new_SegmentID == pm.environment.get(\"SegmentID\"));\r",
							"\r",
							"        pm.environment.set(\"new_SegmentID\", new_SegmentID);\r",
							"        \r",
							"        pm.test(`new_SegmentID = ${pm.environment.get(\"new_SegmentID\")} was recorded to the environment collection`, function () {\r",
							"            pm.expect(new_SegmentID).to.eql(pm.environment.get(\"new_SegmentID\"));\r",
							"            pm.expect(new_SegmentID).to.not.eql(pm.environment.get(\"SegmentID\"));\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(SegmentID) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"pm.test(\"Key 'SegmentID' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.SegmentID).to.eql(pm.environment.get(\"SegmentID\"));\r",
							"\r",
							"    jsonData.SegmentID = pm.environment.get(\"new_SegmentID\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.SegmentID).to.not.eql(pm.environment.get(\"SegmentID\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'SegmentID' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.SegmentID).to.eql(pm.environment.get(\"new_SegmentID\"));\r",
							"    pm.expect(body.SegmentID).to.not.eql(pm.environment.get(\"SegmentID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(ShortNameEng) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"\r",
							"pm.environment.set(\"new_ShortNameEng\", \"1234567890 - Counterparty short - Latin\");\r",
							"\r",
							"pm.test(\"Key 'ShortNameEng' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ShortNameEng).to.eql(pm.environment.get(\"ShortNameEng\"));\r",
							"\r",
							"    jsonData.ShortNameEng = pm.environment.get(\"new_ShortNameEng\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ShortNameEng).to.not.eql(pm.environment.get(\"ShortNameEng\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ShortNameEng' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.ShortNameEng).to.eql(pm.environment.get(\"new_ShortNameEng\"));\r",
							"    pm.expect(body.ShortNameEng).to.not.eql(pm.environment.get(\"ShortNameEng\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(IsActive) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"\r",
							"switch (String(pm.environment.get(\"IsActive\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_IsActive\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_IsActive\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"IsActive key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'IsActive' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsActive).to.eql(pm.environment.get(\"IsActive\"));\r",
							"\r",
							"    jsonData.IsActive = pm.environment.get(\"new_IsActive\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsActive).to.not.eql(pm.environment.get(\"IsActive\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'IsActive' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.IsActive).to.eql(pm.environment.get(\"new_IsActive\"));\r",
							"    pm.expect(body.IsActive).to.not.eql(pm.environment.get(\"IsActive\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.MinAmountToPrint) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"function random_integer(endpoint) {\r",
							"    return Math.floor(Math.random() * Math.floor(endpoint));\r",
							"}\r",
							"\r",
							"\r",
							"let new_MinAmountToPrint;\r",
							"\r",
							"do {\r",
							"    new_MinAmountToPrint = random_integer(1001);\r",
							"} while (new_MinAmountToPrint == pm.environment.get(\"MinAmountToPrint\"));\r",
							"\r",
							"pm.environment.set(\"new_MinAmountToPrint\", new_MinAmountToPrint);\r",
							"\r",
							"pm.test(\"Key 'MinAmountToPrint' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.MinAmountToPrint).to.eql(pm.environment.get(\"MinAmountToPrint\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.MinAmountToPrint = pm.environment.get(\"new_MinAmountToPrint\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.MinAmountToPrint).to.not.eql(pm.environment.get(\"MinAmountToPrint\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'MinAmountToPrint' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.MinAmountToPrint).to.eql(pm.environment.get(\"new_MinAmountToPrint\"));\r",
							"    pm.expect(body.AdditionalInfo.MinAmountToPrint).to.not.eql(pm.environment.get(\"MinAmountToPrint\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Priority) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"function random_element(array) {\r",
							"    return array[Math.floor(Math.random() * Math.floor(array.length))];\r",
							"}\r",
							"\r",
							"\r",
							"let Priority_arr = [\"1\", \"2\", \"3\", \"4\", \"5\"];\r",
							"\r",
							"let index_ToDelete = Priority_arr.indexOf(String(pm.environment.get(\"Priority\")));\r",
							"\r",
							"if (index_ToDelete != -1) {\r",
							"    Priority_arr.splice(index_ToDelete, 1);\r",
							"}\r",
							"\r",
							"pm.environment.set(\"new_Priority\", random_element(Priority_arr));\r",
							"\r",
							"\r",
							"pm.test(\"Key 'Priority' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Priority).to.eql(pm.environment.get(\"Priority\"));\r",
							"\r",
							"    jsonData.Priority = pm.environment.get(\"new_Priority\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Priority).to.not.eql(pm.environment.get(\"Priority\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'Priority' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.Priority).to.eql(pm.environment.get(\"new_Priority\"));\r",
							"    pm.expect(body.Priority).to.not.eql(pm.environment.get(\"Priority\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Creditor) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_Creditor\", \"NEW! Lender (Кредитор)\");\r",
							"\r",
							"pm.test(\"Key 'Creditor' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Creditor).to.eql(pm.environment.get(\"Creditor\"));\r",
							"\r",
							"    jsonData.Creditor = pm.environment.get(\"new_Creditor\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.Creditor).to.not.eql(pm.environment.get(\"Creditor\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'Creditor' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.Creditor).to.eql(pm.environment.get(\"new_Creditor\"));\r",
							"    pm.expect(body.Creditor).to.not.eql(pm.environment.get(\"Creditor\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.PrimaryCreditor) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_PrimaryCreditor\", \"NEW! Original lender (Первоначальный кредитор)\");\r",
							"\r",
							"pm.test(\"Key 'PrimaryCreditor' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.PrimaryCreditor).to.eql(pm.environment.get(\"PrimaryCreditor\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.PrimaryCreditor = pm.environment.get(\"new_PrimaryCreditor\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.PrimaryCreditor).to.not.eql(pm.environment.get(\"PrimaryCreditor\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'PrimaryCreditor' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.PrimaryCreditor).to.eql(pm.environment.get(\"new_PrimaryCreditor\"));\r",
							"    pm.expect(body.AdditionalInfo.PrimaryCreditor).to.not.eql(pm.environment.get(\"PrimaryCreditor\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Server) localhost:{{port}}/collateral-users",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json();\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Login\"];\r",
							"\r",
							"const collateral_users_schema = {\r",
							"    \"title\": `An array of two objects containing IDs and logins of two randomly selected users / SELECT * FROM \"Data\".\"User\";`,\r",
							"    \"items\": {\r",
							"        \"title\": \"An object value with user's identification number and login\",\r",
							"        \"required\": [\r",
							"            \"ID\",\r",
							"            \"Login\"\r",
							"        ],\r",
							"        \"properties\": {\r",
							"            \"ID\": {\r",
							"                \"title\": `Identification number / SELECT \"ID\" FROM \"Data\".\"User\";`,\r",
							"                \"default\": 1,\r",
							"                \"examples\": [\r",
							"                    2940\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/ID\",\r",
							"                \"type\": \"integer\"\r",
							"            },\r",
							"            \"Login\": {\r",
							"                \"title\": `User's login / SELECT \"Login\" FROM \"Data\".\"User\";`,\r",
							"                \"default\": \"\",\r",
							"                \"pattern\": \"^(.*)$\",\r",
							"                \"examples\": [\r",
							"                    \"GURS189\"\r",
							"                ],\r",
							"                \"$id\": \"#/items/properties/Login\",\r",
							"                \"type\": \"string\"\r",
							"            }\r",
							"        },\r",
							"        \"$id\": \"#/items\",\r",
							"        \"additionalProperties\": false,\r",
							"        \"type\": \"object\"\r",
							"    },\r",
							"    \"$id\": \"localhost/collateral-users\",\r",
							"    \"type\": \"array\",\r",
							"    \"additionalProperties\": false,\r",
							"    \"definitions\": {},\r",
							"    \"$schema\": \"collateral-users\"\r",
							"}\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test('randomUser_schema is valid', function() {\r",
							"  pm.expect(tv4.validate(body, collateral_users_schema)).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array from response body has length of ${expected_keys_in_response_body.length} and expected values`, function () {\r",
							"    pm.expect(body).to.be.an('array');\r",
							"    pm.expect(body).to.have.lengthOf(2);\r",
							"\r",
							"    body.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"\r",
							"        pm.expect(elem.ID).to.be.a(\"number\");\r",
							"        pm.expect(elem.ID).to.be.above(0);\r",
							"\r",
							"        pm.expect(elem.Login).to.be.a(\"string\");\r",
							"        pm.expect(elem.Login).to.not.eql(\"\");\r",
							"\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_response_body.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"if (body[0].ID == pm.environment.get(\"ResponsibleUserID\")) {\r",
							"    pm.environment.set(\"new_ResponsibleUserID\", body[1].ID);\r",
							"    pm.environment.set(\"new_ResponsibleUserLogin\", body[1].Login);\r",
							"} else {\r",
							"    pm.environment.set(\"new_ResponsibleUserID\", body[0].ID);\r",
							"    pm.environment.set(\"new_ResponsibleUserLogin\", body[0].Login);\r",
							"}\r",
							"\r",
							"pm.test(\"new_ResponsibleUserID and new_ResponsibleUserLogin were recorded to the collection; new_ResponsibleUserID value differs from ResponsibleUserID\", function () {\r",
							"    pm.expect(pm.environment.get(\"new_ResponsibleUserID\")).to.be.oneOf([body[0].ID, body[1].ID]);\r",
							"    pm.expect(pm.environment.get(\"new_ResponsibleUserLogin\")).to.be.oneOf([body[0].Login, body[1].Login]);\r",
							"   \r",
							"    pm.expect(pm.environment.get(\"new_ResponsibleUserID\")).to.not.eql(pm.environment.get(\"ResponsibleUserID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "http://localhost:3000/collateral-users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"collateral-users"
					]
				}
			},
			"response": []
		},
		{
			"name": "(ResponsibleUserID) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.test(\"Key 'ResponsibleUserID' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ResponsibleUserID).to.eql(pm.environment.get(\"ResponsibleUserID\"));\r",
							"\r",
							"    jsonData.ResponsibleUserID = pm.environment.get(\"new_ResponsibleUserID\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.ResponsibleUserID).to.not.eql(pm.environment.get(\"ResponsibleUserID\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ResponsibleUserID' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.ResponsibleUserID).to.eql(pm.environment.get(\"new_ResponsibleUserID\"));\r",
							"    pm.expect(body.ResponsibleUserID).to.not.eql(pm.environment.get(\"ResponsibleUserID\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContractType) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContractType\", \"NEW! Contract type (Тип договора)\");\r",
							"\r",
							"pm.test(\"Key 'ContractType' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContractType).to.eql(pm.environment.get(\"ContractType\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContractType = pm.environment.get(\"new_ContractType\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContractType).to.not.eql(pm.environment.get(\"ContractType\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContractType' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContractType).to.eql(pm.environment.get(\"new_ContractType\"));\r",
							"    pm.expect(body.AdditionalInfo.ContractType).to.not.eql(pm.environment.get(\"ContractType\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.AgreementDate) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"function random_date(starting_date, closing_date) {\r",
							"    return new Date(starting_date.getTime() + Math.random() * (closing_date.getTime() - starting_date.getTime()));\r",
							"}\r",
							"\r",
							"\r",
							"let new_AgreementDate;\r",
							"\r",
							"do {\r",
							"    new_AgreementDate = random_date(new Date(2012, 0, 1), new Date(2100, 0, 1));\r",
							"    new_AgreementDate = new_AgreementDate.getFullYear() + '-' + ('0' + (new_AgreementDate.getMonth() + 1)).slice(-2) + '-' + ('0' + new_AgreementDate.getDate()).slice(-2);\r",
							"} while (new_AgreementDate === pm.environment.get(\"AgreementDate\"));\r",
							"\r",
							"pm.environment.set(\"new_AgreementDate\", new_AgreementDate);\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Key 'AgreementDate' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.AgreementDate).to.eql(pm.environment.get(\"AgreementDate\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.AgreementDate = pm.environment.get(\"new_AgreementDate\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.AgreementDate).to.not.eql(pm.environment.get(\"AgreementDate\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'AgreementDate' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.AgreementDate).to.eql(pm.environment.get(\"new_AgreementDate\"));\r",
							"    pm.expect(body.AdditionalInfo.AgreementDate).to.not.eql(pm.environment.get(\"AgreementDate\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContractNumber) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContractNumber\", \"NEW! Contract No. (Номер договора)\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ContractNumber' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContractNumber).to.eql(pm.environment.get(\"ContractNumber\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContractNumber = pm.environment.get(\"new_ContractNumber\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContractNumber).to.not.eql(pm.environment.get(\"ContractNumber\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContractNumber' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContractNumber).to.eql(pm.environment.get(\"new_ContractNumber\"));\r",
							"    pm.expect(body.AdditionalInfo.ContractNumber).to.not.eql(pm.environment.get(\"ContractNumber\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContragentTaxNumber) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContragentTaxNumber\", \"NEW! Tax number (ОГРН / ИНН)\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ContragentTaxNumber' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentTaxNumber).to.eql(pm.environment.get(\"ContragentTaxNumber\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContragentTaxNumber = pm.environment.get(\"new_ContragentTaxNumber\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentTaxNumber).to.not.eql(pm.environment.get(\"ContragentTaxNumber\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContragentTaxNumber' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContragentTaxNumber).to.eql(pm.environment.get(\"new_ContragentTaxNumber\"));\r",
							"    pm.expect(body.AdditionalInfo.ContragentTaxNumber).to.not.eql(pm.environment.get(\"ContragentTaxNumber\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContragentInfoEmail) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContragentInfoEmail\", \"plias.yaroslav@gmail.com\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoEmail' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoEmail).to.eql(pm.environment.get(\"ContragentInfoEmail\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContragentInfoEmail = pm.environment.get(\"new_ContragentInfoEmail\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoEmail).to.not.eql(pm.environment.get(\"ContragentInfoEmail\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoEmail' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoEmail).to.eql(pm.environment.get(\"new_ContragentInfoEmail\"));\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoEmail).to.not.eql(pm.environment.get(\"ContragentInfoEmail\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ClientInfoPhone) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ClientInfoPhone\", \"NEW! Contact number (Контактный телефон)\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ClientInfoPhone' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ClientInfoPhone).to.eql(pm.environment.get(\"ClientInfoPhone\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ClientInfoPhone = pm.environment.get(\"new_ClientInfoPhone\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ClientInfoPhone).to.not.eql(pm.environment.get(\"ClientInfoPhone\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ClientInfoPhone' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ClientInfoPhone).to.eql(pm.environment.get(\"new_ClientInfoPhone\"));\r",
							"    pm.expect(body.AdditionalInfo.ClientInfoPhone).to.not.eql(pm.environment.get(\"ClientInfoPhone\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContragentInfoPostAddress) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContragentInfoPostAddress\", \"NEW! Mailing address (Почтовый адрес)\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoPostAddress' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoPostAddress).to.eql(pm.environment.get(\"ContragentInfoPostAddress\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContragentInfoPostAddress = pm.environment.get(\"new_ContragentInfoPostAddress\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoPostAddress).to.not.eql(pm.environment.get(\"ContragentInfoPostAddress\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoPostAddress' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoPostAddress).to.eql(pm.environment.get(\"new_ContragentInfoPostAddress\"));\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoPostAddress).to.not.eql(pm.environment.get(\"ContragentInfoPostAddress\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ContragentInfoAddress) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_ContragentInfoAddress\", \"NEW! Location address (Адрес места нахождения)\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoAddress' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoAddress).to.eql(pm.environment.get(\"ContragentInfoAddress\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ContragentInfoAddress = pm.environment.get(\"new_ContragentInfoAddress\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ContragentInfoAddress).to.not.eql(pm.environment.get(\"ContragentInfoAddress\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ContragentInfoAddress' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoAddress).to.eql(pm.environment.get(\"new_ContragentInfoAddress\"));\r",
							"    pm.expect(body.AdditionalInfo.ContragentInfoAddress).to.not.eql(pm.environment.get(\"ContragentInfoAddress\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(WebSite) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"pm.environment.set(\"new_WebSite\", \"https://www.youtube.com/watch?v=VwN76HtV3Uo\");\r",
							"\r",
							"\r",
							"pm.test(\"Key 'WebSite' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.WebSite).to.eql(pm.environment.get(\"WebSite\"));\r",
							"\r",
							"    jsonData.WebSite = pm.environment.get(\"new_WebSite\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.WebSite).to.not.eql(pm.environment.get(\"WebSite\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'WebSite' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.WebSite).to.eql(pm.environment.get(\"new_WebSite\"));\r",
							"    pm.expect(body.WebSite).to.not.eql(pm.environment.get(\"WebSite\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AutoLetter) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"AutoLetter\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_AutoLetter\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_AutoLetter\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"AutoLetter key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'AutoLetter' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AutoLetter).to.eql(pm.environment.get(\"AutoLetter\"));\r",
							"\r",
							"    jsonData.AutoLetter = pm.environment.get(\"new_AutoLetter\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AutoLetter).to.not.eql(pm.environment.get(\"AutoLetter\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'AutoLetter' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AutoLetter).to.eql(pm.environment.get(\"new_AutoLetter\"));\r",
							"    pm.expect(body.AutoLetter).to.not.eql(pm.environment.get(\"AutoLetter\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(BankAccountRequired) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"BankAccountRequired\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_BankAccountRequired\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_BankAccountRequired\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"BankAccountRequired key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'BankAccountRequired' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.BankAccountRequired).to.eql(pm.environment.get(\"BankAccountRequired\"));\r",
							"\r",
							"    jsonData.BankAccountRequired = pm.environment.get(\"new_BankAccountRequired\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.BankAccountRequired).to.not.eql(pm.environment.get(\"BankAccountRequired\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'BankAccountRequired' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.BankAccountRequired).to.eql(pm.environment.get(\"new_BankAccountRequired\"));\r",
							"    pm.expect(body.BankAccountRequired).to.not.eql(pm.environment.get(\"BankAccountRequired\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(PersonalAccountEnabled) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"PersonalAccountEnabled\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_PersonalAccountEnabled\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_PersonalAccountEnabled\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"PersonalAccountEnabled key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'PersonalAccountEnabled' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.PersonalAccountEnabled).to.eql(pm.environment.get(\"PersonalAccountEnabled\"));\r",
							"\r",
							"    jsonData.PersonalAccountEnabled = pm.environment.get(\"new_PersonalAccountEnabled\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.PersonalAccountEnabled).to.not.eql(pm.environment.get(\"PersonalAccountEnabled\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'PersonalAccountEnabled' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.PersonalAccountEnabled).to.eql(pm.environment.get(\"new_PersonalAccountEnabled\"));\r",
							"    pm.expect(body.PersonalAccountEnabled).to.not.eql(pm.environment.get(\"PersonalAccountEnabled\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(IsAutoCall) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"IsAutoCall\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_IsAutoCall\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_IsAutoCall\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"IsAutoCall key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'IsAutoCall' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsAutoCall).to.eql(pm.environment.get(\"IsAutoCall\"));\r",
							"\r",
							"    jsonData.IsAutoCall = pm.environment.get(\"new_IsAutoCall\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsAutoCall).to.not.eql(pm.environment.get(\"IsAutoCall\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'IsAutoCall' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.IsAutoCall).to.eql(pm.environment.get(\"new_IsAutoCall\"));\r",
							"    pm.expect(body.IsAutoCall).to.not.eql(pm.environment.get(\"IsAutoCall\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(IsAutoSms) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"IsAutoSms\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_IsAutoSms\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_IsAutoSms\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"IsAutoSms key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'IsAutoSms' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsAutoSms).to.eql(pm.environment.get(\"IsAutoSms\"));\r",
							"\r",
							"    jsonData.IsAutoSms = pm.environment.get(\"new_IsAutoSms\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.IsAutoSms).to.not.eql(pm.environment.get(\"IsAutoSms\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'IsAutoSms' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.IsAutoSms).to.eql(pm.environment.get(\"new_IsAutoSms\"));\r",
							"    pm.expect(body.IsAutoSms).to.not.eql(pm.environment.get(\"IsAutoSms\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(AdditionalInfo.ShowPrimaryCreditor) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//--- UPDATE REQUEST ---//\r",
							"\r",
							"switch (String(pm.environment.get(\"ShowPrimaryCreditor\"))) {\r",
							"    case '1':\r",
							"        pm.environment.set(\"new_ShowPrimaryCreditor\", '0');\r",
							"        break;\r",
							"    case '0':\r",
							"        pm.environment.set(\"new_ShowPrimaryCreditor\", '1');\r",
							"        break;\r",
							"    default:\r",
							"        pm.test(\"ShowPrimaryCreditor key has unexpected value\", function () {\r",
							"            pm.expect(true).to.eql(false);\r",
							"        });\r",
							"}\r",
							"\r",
							"pm.test(\"Key 'ShowPrimaryCreditor' in the environment variable 'response' was edited successfully\", function () {\r",
							"\r",
							"    let jsonData = JSON.parse(pm.environment.get(\"response\"));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ShowPrimaryCreditor).to.eql(pm.environment.get(\"ShowPrimaryCreditor\"));\r",
							"\r",
							"    jsonData.AdditionalInfo.ShowPrimaryCreditor = pm.environment.get(\"new_ShowPrimaryCreditor\");\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.not.eql(pm.environment.get(\"response\"));\r",
							"    pm.expect(jsonData.AdditionalInfo.ShowPrimaryCreditor).to.not.eql(pm.environment.get(\"IsAutoSms\"));\r",
							"\r",
							"    pm.environment.set(\"response\", JSON.stringify(jsonData));\r",
							"\r",
							"    pm.expect(JSON.stringify(jsonData)).to.eql(pm.environment.get(\"response\"));\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body           = pm.response.json();\r",
							"const response       = JSON.parse(pm.environment.get(\"response\"));\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"pm.test(\"Key 'ShowPrimaryCreditor' was successfully updated to the expected value while others remained unchanged (except for: 'Updated' and 'GroupID' keys; change in the data type of several keys' value; sort of 'AdditionalInfo' keys were performed)\", function () {\r",
							"    \r",
							"    let sorted_AdditionalInfo = {};\r",
							"    \r",
							"    Object.keys(body.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo[item] = body.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    body.AdditionalInfo = sorted_AdditionalInfo;\r",
							"\r",
							"    // --\r",
							"\r",
							"    let sorted_AdditionalInfo_from_response = {};\r",
							"\r",
							"    Object.keys(response.AdditionalInfo).sort().forEach(function(item){\r",
							"        sorted_AdditionalInfo_from_response[item] = response.AdditionalInfo[item];\r",
							"    });\r",
							"\r",
							"    response.AdditionalInfo = sorted_AdditionalInfo_from_response;\r",
							"\r",
							"\r",
							"    body.strategy                               = \"overview\";\r",
							"    body.Updated                                = \"\";\r",
							"    body.GroupID                                = \"\";\r",
							"\r",
							"    body.AdditionalInfo.ShowPrimaryCreditor     = String(body.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    body.IsActive                               = String(body.IsActive);\r",
							"    body.Priority                               = String(body.Priority);\r",
							"    body.IsAutoSms                              = String(body.IsAutoSms);\r",
							"    body.IsAutoCall                             = String(body.IsAutoCall);\r",
							"    body.PersonalAccountEnabled                 = String(body.PersonalAccountEnabled);\r",
							"    body.BankAccountRequired                    = String(body.BankAccountRequired);\r",
							"    body.AutoLetter                             = String(body.AutoLetter);\r",
							"\r",
							"        \r",
							"    response.Updated                            = \"\";\r",
							"    response.GroupID                            = \"\";\r",
							"\r",
							"    response.AdditionalInfo.ShowPrimaryCreditor = String(response.AdditionalInfo.ShowPrimaryCreditor);\r",
							"    response.IsActive                           = String(response.IsActive);\r",
							"    response.Priority                           = String(response.Priority);\r",
							"    response.IsAutoSms                          = String(response.IsAutoSms);\r",
							"    response.IsAutoCall                         = String(response.IsAutoCall);\r",
							"    response.PersonalAccountEnabled             = String(response.PersonalAccountEnabled);\r",
							"    response.BankAccountRequired                = String(response.BankAccountRequired);\r",
							"    response.AutoLetter                         = String(response.AutoLetter);\r",
							"\r",
							"    pm.expect(JSON.stringify(body)).to.eql(JSON.stringify(response));\r",
							"\r",
							"    pm.expect(body.AdditionalInfo.ShowPrimaryCreditor).to.eql(pm.environment.get(\"new_ShowPrimaryCreditor\"));\r",
							"    pm.expect(body.AdditionalInfo.ShowPrimaryCreditor).to.not.eql(pm.environment.get(\"ShowPrimaryCreditor\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "(initial state) /api/contragent-search/{{ContrahensID}}",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let origin;\r",
							"\r",
							"if (/\\.ru\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.ru.*$/s, \".ru\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"if(/\\.com\\/.*$/s.test(pm.globals.get(\"project\"))) {\r",
							"    origin = pm.globals.get(\"project\").replace(/\\.com.*$/s, \".com\");\r",
							"    pm.environment.set(\"origin\", origin);\r",
							"}\r",
							"\r",
							"\r",
							"let referer = origin + \"/\";\r",
							"pm.environment.set(\"referer\", referer);\r",
							"\r",
							"\r",
							"let request_url    = origin.split('.');\r",
							"    request_url[0] = request_url[0] + \"-\" + pm.globals.get(\"host\");\r",
							"    request_url    = request_url.join('.');\r",
							"pm.environment.set(\"request_url\", request_url);\r",
							"\r",
							"\r",
							"let authority = request_url.replace(/^http:\\/\\/|^https:\\/\\//, \"\");\r",
							"pm.environment.set(\"authority\", authority);\r",
							"\r",
							"\r",
							"\r",
							"//---   UPDATE REQUEST   ---//\r",
							"\r",
							"pm.test(\"PUT status code is 200\", function () {\r",
							"    let stopwatch_launch = new Date().getTime();\r",
							"\r",
							"    pm.sendRequest({\r",
							"        url: pm.environment.get(\"request_url\") + '/api/admin/contragent-search/' + pm.globals.get(\"ContrahensID\"),\r",
							"        method: 'PUT',\r",
							"        header: {\r",
							"            'authority': `${pm.environment.get(\"authority\")}`,\r",
							"            'pragma': 'no-cache',\r",
							"            'cache-control': 'no-cache',\r",
							"            'sec-ch-ua': '\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\"',\r",
							"            'accept': 'application/json',\r",
							"            'uniquehashcaseid': 'undefined',\r",
							"            'authorization': `Bearer ${pm.globals.get(\"access_token\")}`,\r",
							"            'sec-ch-ua-mobile': '?0',\r",
							"            'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36',\r",
							"            'content-type': 'application/json;charset=UTF-8',\r",
							"            'origin': `${pm.environment.get(\"origin\")}`,\r",
							"            'sec-fetch-site': 'same-site',\r",
							"            'sec-fetch-mode': 'cors',\r",
							"            'sec-fetch-dest': 'empty',\r",
							"            'referer': `${pm.environment.get(\"referer\")}`,\r",
							"            'accept-language': 'ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1',\r",
							"            'cookie': `${pm.globals.get(\"cookie\")}`\r",
							"        },\r",
							"        body: {\r",
							"            mode: 'raw',\r",
							"            raw: pm.environment.get(\"original_response\")\r",
							"        }\r",
							"    }, function (err, res) {\r",
							"        let stopwatch_stop = new Date().getTime();\r",
							"\r",
							"        pm.expect(err).to.not.be.ok;\r",
							"        console.log('stderr stream returned: ' + err);\r",
							"\r",
							"        pm.expect(res).to.have.property('code', 200);\r",
							"        pm.expect(res).to.have.property('status', 'OK');\r",
							"\r",
							"        pm.test(\"PUT response time is less than 5000ms\", function () {\r",
							"            pm.expect(stopwatch_stop - stopwatch_launch).to.be.below(5000);\r",
							"        });\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function deepEqual (obj1, obj2){\r",
							"  return JSON.stringify(obj1) === JSON.stringify(obj2);\r",
							"}\r",
							"\r",
							"const body           = pm.response.json();\r",
							"const AdditionalInfo = body.AdditionalInfo;\r",
							"const letterType     = body.letterType;\r",
							"\r",
							"const expected_keys_in_response_body = [\"ID\", \"Name\", \"ShortName\", \"SegmentID\", \"CityCode\", \"City\", \"Street\", \"PhoneNumber\", \r",
							"                                        \"FaxNumber\", \"AuthorizedForPayment\", \"AuthorizedForPaymentShort\", \"ReceivingBank\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BranchBank\", \"BankId\", \"TaxNumber\", \"AuthId\", \"Password\", \"LetterPhoneId\", \"AutoLetter\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"BankAccountRequired\", \"PersonalAccountEnabled\", \"PromiseDays\", \"DefaultBookingOrderID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"WebSite\", \"GroupID\", \"IsActive\", \"SMSTemplateID\", \"Priority\", \"ShortNameEng\", \"PaymentDetails\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"Inserted\", \"Updated\", \"MultiInvoiceBookingTypeID\", \"AdditionalInfo\", \"AutoReportTemplateID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"EmailTemplateID\", \"IsAutoCall\", \"IsAutoSms\", \"ResponsibleUserID\", \"ActualOndateAggregationLevelID\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"MaxPaymentDateAggregationLevelID\", \"Creditor\", \"InterestOrderID\", \"GroupName\", \"MFO\", \"OKPO\", \"systemPhones\", \r",
							"\t\t\t\t\t\t\t\t\t\t\"letterType\", \"DebtorFeeSetID\", \"AutoCloseOrderID\"];\r",
							"\r",
							"const expected_keys_in_letterType    = [\"LetterTypeAliasID\", \"LetterTypeID\"];\r",
							"\r",
							"\r",
							"class Entries {\r",
							"  \r",
							"  static dictionary = {\r",
							"    \"body\" : [\"Name\", \"GroupName\", \"ShortName\", \"SegmentID\", \"ShortNameEng\", \"IsActive\",  \"Priority\", \"Creditor\", \"ResponsibleUserID\", \"WebSite\", \"AutoLetter\", \"BankAccountRequired\", \"PersonalAccountEnabled\", \"IsAutoCall\", \"IsAutoSms\"],\r",
							"    \"AdditionalInfo\" : [\"ContractType\", \"AgreementDate\", \"ContractNumber\", \"ClientInfoPhone\", \"PrimaryCreditor\", \"MinAmountToPrint\", \"ContragentInfoEmail\", \"ContragentTaxNumber\", \"ShowPrimaryCreditor\", \"ContragentInfoAddress\", \"ContragentInfoPostAddress\"]\r",
							"  }\r",
							"  \r",
							"  static extractFrom (object) {\r",
							"    \r",
							"    let obj = {};\r",
							"    \r",
							"    for (let prop in object) {\r",
							"      \r",
							"      if ((this.dictionary.body.includes(prop)) || (this.dictionary.AdditionalInfo.includes(prop))) {\r",
							"        obj[prop] = object[prop]\r",
							"      }\r",
							"\r",
							"    }\r",
							"    \r",
							"    return obj;\r",
							"  }\r",
							"\r",
							"}\r",
							"\r",
							"\r",
							"/* --- TESTS --- */\r",
							"\r",
							"pm.test(\"Check the active environment is 'editing counterparty overview page'\", () => {\r",
							"    pm.expect(pm.environment.name).to.eql(\"editing counterparty overview page\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful GET request! Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 'OK'\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"GET Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is an object that has all expected keys\", function () {\r",
							"\r",
							"    pm.expect(body).to.be.an('object').that.has.all.keys(expected_keys_in_response_body);\r",
							"\r",
							"    let storageTank = Object.keys(body).filter(function(key) {\r",
							"        return !expected_keys_in_response_body.includes(key) \r",
							"    }); \r",
							"           \r",
							"    if (storageTank.length !== 0) {\r",
							"        console.log(`Actual keys received in response did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"    }\r",
							"    \r",
							"    pm.expect(storageTank.length).to.eql(0);\r",
							"});\r",
							"\r",
							"pm.test(`Response body has length of ${expected_keys_in_response_body.length}`, function () {\r",
							"    pm.expect(Object.keys(body)).to.have.lengthOf(expected_keys_in_response_body.length);\r",
							"});\r",
							"\r",
							"pm.test(`An object elements in an array of 'letterType' key has length of ${expected_keys_in_letterType.length} and expected values`, function () {\r",
							"    pm.expect(letterType).to.be.an('array');\r",
							"\r",
							"    letterType.forEach((elem)=> {\r",
							"        pm.expect(elem).to.be.an('object').that.has.all.keys(expected_keys_in_letterType);\r",
							"        pm.expect(Object.keys(elem)).to.have.lengthOf(expected_keys_in_letterType.length);\r",
							"\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.above(0);\r",
							"        pm.expect(elem.LetterTypeAliasID).to.be.below(16);\r",
							"\r",
							"        let storageTank = Object.keys(elem).filter(function(key) {\r",
							"            return !expected_keys_in_letterType.includes(key) \r",
							"        });\r",
							"        \r",
							"        if (storageTank.length !== 0) {\r",
							"            console.log(`Actual keys received in the array of 'letterType' key did not meet the expected. Unexpected keys: ${storageTank}`)\r",
							"        }\r",
							"        \r",
							"        pm.expect(storageTank.length).to.eql(0);\r",
							"        \r",
							"    })\r",
							"})\r",
							"\r",
							"// --- Checking editable keys' values have been returned to the original state\r",
							"\r",
							"pm.test(`Editable from counterparty overview page keys in the response body were successfully returned to the initial state`, function () {\r",
							"  let essence = Entries.extractFrom(body);\r",
							"\r",
							"  let storageTank = Entries.dictionary.body.filter(function(key) {\r",
							"      return !Object.keys(essence).includes(key) \r",
							"  }); \r",
							"\r",
							"  if (storageTank.length !== 0) {\r",
							"      console.log(`Missing keys: ${storageTank}`)\r",
							"  }\r",
							"  \r",
							"  pm.expect(essence).to.be.an('object').that.has.all.keys(Entries.dictionary.body);\r",
							"  pm.expect(storageTank.length).to.eql(0);\r",
							"\r",
							"  pm.expect(Object.keys(essence)).to.have.lengthOf(Entries.dictionary.body.length);\r",
							"\r",
							"  Object.keys(essence).forEach((item) => {\r",
							"      console.log(`Key: ${item}`);\r",
							"      pm.expect(essence[item]).to.eql(pm.environment.get(item));\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(`Editable from counterparty overview page keys located in the 'AdditionalInfo' nested key were successfully returned to the initial state`, function () {\r",
							"  let essence = Entries.extractFrom(AdditionalInfo);\r",
							"\r",
							"  let storageTank = Entries.dictionary.AdditionalInfo.filter(function(key) {\r",
							"      return !Object.keys(essence).includes(key) \r",
							"  }); \r",
							"\r",
							"  if (storageTank.length !== 0) {\r",
							"      console.log(`Missing keys: ${storageTank}`)\r",
							"  }\r",
							"  \r",
							"  pm.expect(essence).to.be.an('object').that.has.all.keys(Entries.dictionary.AdditionalInfo);\r",
							"  pm.expect(storageTank.length).to.eql(0);\r",
							"\r",
							"  pm.expect(Object.keys(essence)).to.have.lengthOf(Entries.dictionary.AdditionalInfo.length);\r",
							"\r",
							"  Object.keys(essence).forEach((item) => {\r",
							"      console.log(`Key: ${item}`);\r",
							"      pm.expect(String(essence[item])).to.eql(String(pm.environment.get(item)));\r",
							"  });\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "authority",
						"value": "{{authority}}"
					},
					{
						"key": "pragma",
						"value": "no-cache"
					},
					{
						"key": "cache-control",
						"value": "no-cache"
					},
					{
						"key": "sec-ch-ua",
						"value": "\"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Google Chrome\";v=\"92\""
					},
					{
						"key": "accept",
						"value": "application/json"
					},
					{
						"key": "uniquehashcaseid",
						"value": "undefined"
					},
					{
						"key": "authorization",
						"value": "Bearer {{access_token}}"
					},
					{
						"key": "sec-ch-ua-mobile",
						"value": "?0"
					},
					{
						"key": "user-agent",
						"value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
					},
					{
						"key": "origin",
						"value": "{{origin}}"
					},
					{
						"key": "sec-fetch-site",
						"value": "same-site"
					},
					{
						"key": "sec-fetch-mode",
						"value": "cors"
					},
					{
						"key": "sec-fetch-dest",
						"value": "empty"
					},
					{
						"key": "referer",
						"value": "{{referer}}"
					},
					{
						"key": "accept-language",
						"value": "ru,de;q=0.9,uk;q=0.8,hr;q=0.7,hu;q=0.6,en;q=0.5,en-AU;q=0.4,en-GB-oxendict;q=0.3,en-GB;q=0.2,en-IN;q=0.1,en-CA;q=0.1,en-NZ;q=0.1,en-US;q=0.1,en-ZA;q=0.1"
					},
					{
						"key": "cookie",
						"value": "{{cookie}}"
					}
				],
				"url": {
					"raw": "{{request_url}}/api/contragent-search/{{ContrahensID}}",
					"host": [
						"{{request_url}}"
					],
					"path": [
						"api",
						"contragent-search",
						"{{ContrahensID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}